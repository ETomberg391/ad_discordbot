bot_api_functions:
  # This section defines APIs/endpoints that the bot can use "main functions" (bot commands, message responses, etc).
  # To disable any, use value null or comment out the line.
  # Be sure to first define your APIs in "all_apis" (below this section), then link them via "name" (Note: case sensitive!!)
  # Important: Endpoints will often return the relavent data under a dictionary key (or keys).
  #            You may need to check the input/output structure for API endpoints to set the 'key string' or ['list.of', 'key', 'strings']. (dot notation for deeper dict values)
  imggen:
    api_name: Stable Diffusion WebUI
    enabled: True
    post_txt2img: {endpoint_name: Post txt2img}
    post_img2img: {endpoint_name: Post img2img}
    get_progress: {endpoint_name: Get Progress}
    post_png_info: {endpoint_name: Post PNG Info}
    post_options: {endpoint_name: Post Options}
    get_imgmodels: {endpoint_name: Get ImgModels}
    get_controlnet_models: {endpoint_name: Get Cnet Models}
    get_controlnet_control_types: {endpoint_name: Get Cnet Control Types, control_types_key: control_types}
    post_server_restart: {endpoint_name: Post Server Restart}
  # Bot currently cannot use textgen APIs for main functions (support is coming!)
  textgen:
    api_name: Text Generation WebUI
    enabled: False
  # API for TTS is WIP. These settings are currently limited to the '/speak' command (will not work for message requests)
  ttsgen:
    api_name: AllTalk TTS v2
    get_voices: {endpoint_name: Get TTS Voices, get_voices_key: voices}
    get_languages: {endpoint_name: null, get_languages_key: languages}
    post_generate: {endpoint_name: Post TTS Generate, text_input_key: text_input, output_file_path_key: output_file_path, language_input_key: language, speaker_input_key: character_voice_gen}


# Define any APIs to use with the bot
all_apis:
  # You may define any number of APIs and Endpoints here (a list of dictionaries), making them available to use for various bot functions,
  #   including the "main" apis above, the Tags system (dict_tags.yaml), user defined commands (dict_commands.yaml), etc.
  - name: Stable Diffusion WebUI
    url: http://127.0.0.1:7860
    enabled: true
    default_headers: {Content-Type: application/json}
    default_timeout: 10 # seconds to wait before aborting api call
    auth: null # {username: myuser, password: mypass} # dict format with keys 'username' and 'password'
    # Add any endpoints that you may use for bot functions (Tags system, user commands, etc)
    endpoints:
      - {name: Post txt2img, path: /sdapi/v1/txt2img, method: POST, payload_type: json, response_type: json, retry: 1, payload: sd-webui.yaml, timeout: 120}
      - {name: Post img2img, path: /sdapi/v1/img2img, method: POST, timeout: 120}
      - {name: Get Progress, path: /sdapi/v1/progress, method: GET}
      - {name: Post PNG Info, path: /sdapi/v1/png-info, method: POST}
      - {name: Get ImgModels, path: /sdapi/v1/sd-models, method: GET}
      - {name: Get Options, path: /sdapi/v1/options, method: GET}
      - {name: Post Options, path: /sdapi/v1/options, method: POST}
      - {name: Get Cnet Models, path: /controlnet/model_list, method: GET}
      - {name: Get Cnet Control Types, path: /controlnet/control_types, method: GET}
      - {name: Post Server Restart, path: /sdapi/v1/server-restart, method: POST, retry: 0}

  - name: Text Generation WebUI
    url: http://127.0.0.1:7861
    enabled: false
    default_headers: {Content-Type: application/json}
    default_timeout: 60
    auth: null
    endpoints: []

  - name: AllTalk TTS v2
    url: http://127.0.0.1:7851
    enabled: false
    default_headers:
      Content-Type: application/x-www-form-urlencoded
    default_timeout: 120
    auth: null
    endpoints:
      - {name: Get TTS Voices, path: /api/voices, method: GET, timeout: 10}
      - {name: Post TTS Generate, path: /api/tts-generate, method: POST}

  - name: Example image gen API
    url: http://127.0.0.1:7869
    enabled: false
    default_headers: {Content-Type: application/json}
    default_timeout: 60
    auth: null
    endpoints:
      - name: Generate image
        path: /api/imggen
        method: POST
        response_handling:
          preset: Decode base64 and save # from preset below
          post_process:
            - preset: Extract metadata
          filename_prefix: ex_gen # overrides value in the preset


# Define a list of processing presets here, which can be injected in 'response_handling' or in any 'post_process' steps.
response_handling_presets:
  - name: Decode base64 and save
    type: base64
    output_key: images      # key in JSON to extract from. Use dot.notation to get a nested key.
    output_format: png      # only used if type is base64
    save_to: images
    filename_prefix: img_gen
  
  - name: Extract metadata
    endpoint_name: Post PNG Info
    payload_key: image
    response_key: info
    metadata_field: parameters


workflows:
  - name: img_to_img
    steps:
      - name: Transform Image
        api_name: Stable Diffusion WebUI
        endpoint_name: Post img2img
        payload_type: json
        input:
          init_images:
            path: "inputs/photo.jpg"
            as: base64
          prompt: "make it look like a Pixar character"
        save_as: result

  - name: fan_out_translate
    description: Translates a sentence into multiple languages in parallel
    steps:
      - name: Generate English Text
        api_name: Text Generation WebUI
        endpoint_name: Generate
        input:
          prompt: "Say hello"
        response_handling:
          output_key: text
        save_as: base_text
      - group:
          - name: Translate to Spanish
            api_name: DeepL API
            endpoint_name: Translate
            input:
              text: "{base_text}"
              target_lang: "ES"
            save_as: es_text

          - name: Translate to French
            api_name: DeepL API
            endpoint_name: Translate
            input:
              text: "{base_text}"
              target_lang: "FR"
            save_as: fr_text

          - name: Translate to Japanese
            api_name: DeepL API
            endpoint_name: Translate
            input:
              text: "{base_text}"
              target_lang: "JA"
            save_as: ja_text
      - name: Combine All Translations
        api_name: Local Processor
        endpoint_name: Join
        input:
          es: "{es_text}"
          fr: "{fr_text}"
          ja: "{ja_text}"
        save_as: multilingual_output

# payload_type (RECOMMENDED for all POST/PUT).
# Use one of: json / form / multipart (file) / query


# as value | Behavior                             | Payload area
# text     | Load file as UTF-8 string            | json, data
# file     | Load as binary, use multipart        | files
# base64   | Read file, encode in base64          | json or data
# raw      | Read file bytes, send as request body| data
# url      | User provides a direct URL string    | json, params, etc.